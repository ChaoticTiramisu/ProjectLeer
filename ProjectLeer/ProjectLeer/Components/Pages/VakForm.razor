@page "/vakform/{Id:int?}"

@using ProjectLeer.Entity
@using ProjectLeer.Services
@inject VakService VakService
@inject NavigationManager NavigationManager
@inject IJSRuntime JS

<h3>Vak Form</h3>

@if (IsLoading)
{
    <p>Loading...</p>
}
else if (Vak != null)
{
    <p>Vak Name: @Vak.Naam</p>
    <button @onclick="HandleAddVak">Vak toevoegen</button>
}
else
{
    <p>Something went wrong while loading the Vak.</p>
}

@code {
    [Parameter] public int? Id { get; set; }
    private Vak Vak;
    private bool IsLoading = true;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            if (Id.HasValue)
            {
                Vak = await VakService.GetVakByIdAsync(Id.Value);
            }
            else
            {
                Vak = new Vak();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading Vak: {ex.Message}");
        }
        finally
        {
            IsLoading = false; // Ensure loading state ends even on error
        }
    }

    private async Task HandleAddVak()
    {
        try
        {
            await VakService.AddVakAsync(Vak); // Save Vak
            await JS.InvokeVoidAsync("alert", "Vak has been added successfully!");

            // Navigate to a different page or refresh the current page
            NavigationManager.NavigateTo("/vaklist");
        }
        catch (Exception ex)
        {
            await JS.InvokeVoidAsync("alert", $"Failed to add Vak: {ex.Message}");
        }
    }
}
