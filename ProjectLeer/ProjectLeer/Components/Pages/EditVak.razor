@page "/editvak"
@page "/editvak/{Id:int?}"
@inject IVakService VakService
@inject NavigationManager NavigationManager
@inject ILogger<EditVak> Logger
@rendermode InteractiveServer

<h3>@PageTitle</h3>

<EditForm Model="@Vak" OnValidSubmit="@HandleSubmit" FormName="EditVak">
    <DataAnnotationsValidator />
    <ValidationSummary class="text-danger" />

    <div class="form-group mb-3">
        <label for="naam" class="form-label">Subject Name:</label>
        <InputText id="naam" @bind-Value="@Vak.Naam" class="form-control" />
        <ValidationMessage For="@(() => Vak.Naam)" class="text-danger" />
    </div>

    <div class="button-group">
        <button type="submit" class="btn btn-primary me-2" disabled="@IsProcessing">
            @SubmitButtonText
        </button>

        @if (Id.HasValue)
        {
            <button type="button"
                    class="btn btn-danger me-2"
                    onclick="@DeleteVak"
                    disabled="@IsProcessing">
                Delete
            </button>
        }

        <a href="/vakken" class="btn btn-secondary">Back to List</a>
    </div>

    @if (!string.IsNullOrEmpty(ErrorMessage))
    {
        <div class="alert alert-danger mt-3">@ErrorMessage</div>
    }
</EditForm>

@code {
    @inject IJSRuntime JSRuntime
    [Parameter]
    public int? Id { get; set; }

    private Vak Vak { get; set; } = new();
    private string ErrorMessage { get; set; } = string.Empty;
    private bool IsProcessing { get; set; }
    private string PageTitle => Id.HasValue ? "Edit Subject" : "Create New Subject";
    private string SubmitButtonText => Id.HasValue ? "Save Changes" : "Create Subject";

    protected override async Task OnParametersSetAsync()
    {
        try
        {
            if (Id.HasValue)
            {
                Vak = await VakService.GetVakById(Id.Value) ?? new Vak();
                if (Vak.Id == 0)
                {
                    NavigationManager.NavigateTo("/vakken");
                }
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error loading subject");
            ErrorMessage = "Failed to load subject data";
        }
    }

    private async Task HandleSubmit()
    {
        try
        {
            IsProcessing = true;
            ErrorMessage = string.Empty;

            if (Id.HasValue)
            {
                await VakService.EditVak(Id.Value, Vak);
            }
            else
            {
                await VakService.AddVak(Vak);
            }

            NavigationManager.NavigateTo("/vakken");
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error saving subject");
            ErrorMessage = "Failed to save changes. Please try again.";
        }
        finally
        {
            IsProcessing = false;
        }
    }

    private async Task DeleteVak()
    {
        if (!Id.HasValue) return;

        if (!await JSRuntime.InvokeAsync<bool>("confirm", "Are you sure you want to delete this subject?"))
            return;

        try
        {
            IsProcessing = true;
            ErrorMessage = string.Empty;

            await VakService.DeleteVak(Id.Value);
            NavigationManager.NavigateTo("/vakken", forceLoad: true);
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error deleting subject");
            ErrorMessage = "Failed to delete subject. Please try again.";
        }
        finally
        {
            IsProcessing = false;
        }
    }
}